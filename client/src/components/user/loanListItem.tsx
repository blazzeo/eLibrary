import { useState } from "react";
import { Modal, Button, Form, Badge } from "react-bootstrap"; // –î–æ–±–∞–≤–∏–ª–∏ Badge
import { useLibrary } from "../../context/libraryContext";
import { extentLoan, returnBook } from "../../api/DatabaseAPI.tsx";
import { BookInfo } from "../structs.tsx";
import { toast } from "react-toastify";
import { useNavigate } from "react-router";

interface LoanListItemProps {
	book: BookInfo;
}

export const LoanListItem = ({ book }: LoanListItemProps) => {
	const { refreshAll } = useLibrary();
	const [showModal, setShowModal] = useState(false);
	const [newDate, setNewDate] = useState<string>(() => {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
		// –ï—Å–ª–∏ return_date –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–Ω–∏–≥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
		const date = book.owner?.return_date
			? new Date(book.owner.return_date)
			: new Date();
		return date.toISOString().slice(0, 10);
	});

	const navigate = useNavigate();

	// --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ---
	const isOverdue = book.owner && book.owner.return_date
		? new Date(book.owner.return_date) < new Date()
		: false;
	// -----------------------------------

	const onExtend = async () => {
		try {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ owner —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å user_name
			if (!book.owner || !book.owner.user_name) {
				toast.error('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–Ω–∏–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
				return;
			}
			await extentLoan(book.owner.user_name, book.book.book_id, new Date(newDate));
			toast.success('–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω!');
			setShowModal(false);
			await refreshAll(); // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏:", err);
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞.');
		}
	};

	const onReturn = async () => {
		try {
			await returnBook(book.book.book_id);
			toast.success('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!');
			await refreshAll(); // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–Ω–∏–≥–∏:', err);
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–Ω–∏–≥–∏.');
		}
	};

	return (
		<>
			<li className="list-group-item py-2 border-0">
				<div className="d-flex justify-content-between align-items-center px-0">
					<div className="d-flex gap-3 align-items-center">
						<span className="text-success fs-4 lh-1">üìñ</span>
						<div>
							<strong onClick={() => navigate(`/book/${book.book.book_id}`)} className="me-2" style={{ cursor: 'pointer' }}>{book.book.title}</strong>
							{/* –£—Å–ª–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞—à–∫–∏ "–ü–†–û–°–†–û–ß–ï–ù–û" */}
							{isOverdue && (
								<Badge bg="danger" className="ms-2">
									–ü–†–û–°–†–û–ß–ï–ù–û
								</Badge>
							)}
							<div className="small text-muted">
								{book.owner && book.owner.return_date
									? `–î–æ ${new Date(book.owner.return_date).toLocaleDateString()}`
									: "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞"}
							</div>
						</div>
					</div>
					<div className="btn-group btn-group-sm">
						<button
							className="btn btn-outline-primary"
							onClick={() => setShowModal(true)}
							disabled={!book.owner || !book.owner.return_date} // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
						>
							–ü—Ä–æ–¥–ª–∏—Ç—å
						</button>
						<button
							className="btn btn-outline-danger"
							onClick={onReturn}
							disabled={!book.owner} // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ—Ç –Ω–∞ —Ä—É–∫–∞—Ö
						>
							–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å
						</button>
					</div>
				</div>
			</li>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
			<Modal show={showModal} onHide={() => setShowModal(false)}>
				<Modal.Header closeButton>
					<Modal.Title>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞</Modal.Title>
				</Modal.Header>
				<Modal.Body>
					<Form.Group controlId="newReturnDate">
						<Form.Label>–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞</Form.Label>
						<Form.Control
							type="date"
							value={newDate}
							onChange={(e) => setNewDate(e.target.value)}
							min={
								book.owner?.return_date
									? new Date(book.owner.return_date).toISOString().slice(0, 10) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
									: undefined // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ (–∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞ —Ä—É–∫–∞—Ö), –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º min
							}
						/>
					</Form.Group>
				</Modal.Body>
				<Modal.Footer>
					<Button variant="secondary" onClick={() => setShowModal(false)}>
						–û—Ç–º–µ–Ω–∞
					</Button>
					<Button variant="primary" onClick={onExtend}>
						–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
					</Button>
				</Modal.Footer>
			</Modal>
		</>
	);
};
