import { useMemo, useState, useCallback } from "react";
import {
	MaterialReactTable,
	useMaterialReactTable,
	type MRT_ColumnDef,
} from "material-react-table";
import { BookData } from "../../components/structs";
import { toggleWishlist } from "../../components/api/DatabaseAPI";
import { useLibrary } from "../../libraryContext";
import { useNavigate } from "react-router";
import { toast } from "react-toastify";

export default function UserBookTable() {
	const { books, refreshAll, user, updateBookStatus } = useLibrary();
	const navigate = useNavigate();
	const [loadingBookId, setLoadingBookId] = useState<number | null>(null);

	const handleWishlist = useCallback(async (bookId: number, currentStatus: number) => {
		if (!user?.user_name || loadingBookId === bookId) return;

		// –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∂–µ–ª–∞–µ–º–æ–µ –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞ —Ä—É–∫–∞—Ö
		if (currentStatus === 0) {
			toast.warning("–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ —É –≤–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö");
			return;
		}

		try {
			setLoadingBookId(bookId);
			
			// –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 1 –∏ 2
			if (currentStatus === 1 || currentStatus === 2) {
				const newStatus = currentStatus === 1 ? 2 : 1;
				updateBookStatus(bookId, newStatus);
			}
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
			await toggleWishlist(user.user_name, bookId);
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			toast.success(
				currentStatus === 1 
					? "–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ" 
					: "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ"
			);
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ:", error);
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
			if (currentStatus === 1 || currentStatus === 2) {
				updateBookStatus(bookId, currentStatus);
			}
			toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ");
		} finally {
			setLoadingBookId(null);
			// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
			refreshAll();
		}
	}, [user, loadingBookId, updateBookStatus, refreshAll]);

	const columns = useMemo<MRT_ColumnDef<BookData>[]>(
		() => [
			{
				accessorKey: "title",
				header: "–ù–∞–∑–≤–∞–Ω–∏–µ üìñ",
				size: 300,
			},
			{
				accessorKey: "authors",
				header: "–ê–≤—Ç–æ—Ä—ã",
				size: 180,
				grow: false,
				Cell: ({ cell }) => {
					const authors = cell.getValue() as string[];
					return authors?.join(", ");
				},
			},
			{
				accessorKey: "genres",
				header: "–ñ–∞–Ω—Ä—ã",
				size: 50,
				grow: false,
				Cell: ({ cell }) => {
					const genres = cell.getValue() as string[];
					return genres?.join(", ");
				},
			},
			{
				accessorKey: "total_pages",
				header: "–°—Ç—Ä–∞–Ω–∏—Ü üìó",
				grow: false,
				size: 50,
			},
			{
				accessorKey: "rating",
				header: "–†–µ–π—Ç–∏–Ω–≥ ‚≠êÔ∏è",
				grow: false,
				size: 50,
			},
			{
				accessorKey: "published_date",
				header: "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ üìÖ",
				size: 50,
				grow: false,
				Cell: ({ cell }) => {
					const date = new Date(cell.getValue() as string);
					return date.toLocaleDateString();
				},
			},
			{
				accessorKey: "loan_status",
				header: "–°—Ç–∞—Ç—É—Å üîì",
				size: 50,
				grow: false,
				Cell: ({ cell, row }) => {
					const loanStatus = cell.getValue() as number;
					const bookId = row.original.book_id!;
					const isLoading = loadingBookId === bookId;

					if (loanStatus === 0) {
						return (
							<button className="btn btn-secondary" disabled>
								–ù–∞ –∫–Ω–∏–∂–Ω–æ–π –ø–æ–ª–∫–µ
							</button>
						);
					}

					return (
						<button
							className={`btn ${loanStatus === 1 ? "btn-danger" : "btn-success"}`}
							onClick={(e) => {
								e.stopPropagation();
								handleWishlist(bookId, loanStatus);
							}}
							disabled={isLoading}
						>
							{isLoading ? (
								<span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
							) : loanStatus === 1 ? (
								"–£–¥–∞–ª–∏—Ç—å –∏–∑ –∂–µ–ª–∞–µ–º–æ–≥–æ"
							) : (
								"–î–æ–±–∞–≤–∏—Ç—å –≤ –∂–µ–ª–∞–µ–º–æ–µ"
							)}
						</button>
					);
				},
			},
		],
		[loadingBookId, handleWishlist]
	);

	const table = useMaterialReactTable<BookData>({
		columns,
		data: books ?? [],
		enableColumnActions: false,
		enableColumnFilters: false,
		enablePagination: true,
		enableSorting: true,
		enableTopToolbar: false,
		muiTableBodyRowProps: ({ row }) => ({
			onClick: () => {
				const bookId = row.original.book_id;
				navigate(`/book/${bookId}`);
			},
			sx: {
				cursor: "pointer",
				'&:hover': {
					backgroundColor: '#f0f0f0',
				},
			},
		}),
	});

	return books ? <MaterialReactTable table={table} /> : <h1>–ó–∞–≥—Ä—É–∑–∫–∞...</h1>;
}
